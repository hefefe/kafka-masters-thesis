version: '3.8'
services:
  app:
      build:
        context: ../kafka
        dockerfile: app/Dockerfile
      restart: always
      networks:
        kafkaNetwork:
          ipv4_address: 10.100.0.2
      ports:
        - '8080:8080'
      expose:
      - "8080"
      environment:
        SPRING_KAFKA_BOOTSTRAPSERVERS: broker:9092
        SPRING_KAFKA_PARTITIONS: 3
      depends_on:
      - broker
      - kafdrop
  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - '29092:29092'
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:9092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      kafkaNetwork:
        ipv4_address: 10.100.0.3
  kafdrop:
    image: obsidiandynamics/kafdrop:3.30.0
    depends_on:
      - broker
    ports:
      - '9080:9000'
    networks:
      kafkaNetwork:
        ipv4_address: 10.100.0.4
    environment:  
      KAFKA_BROKERCONNECT: broker:9092
  consumer:
    build:
      context: ../consumer
      dockerfile: app/Dockerfile
    restart: always
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: broker:9092
    depends_on:
      - broker
      - kafdrop
      - app
    ports:
      - '10000-10002:10000'
    networks:
      - kafkaNetwork
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip
  prometheus:
    image: docker.io/prom/prometheus:v2.55.1
    container_name: prometheus
    ports:
      - 9090:9090
    expose:
      - "9090"
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    depends_on:
      - consumer
    networks:
      kafkaNetwork:
        ipv4_address: 10.100.0.100
  grafana:
    image: docker.io/grafana/grafana-oss:11.3.0
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      kafkaNetwork:
        ipv4_address: 10.100.0.110
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.51.0
  #   container_name: cadvisor
  #   # ports:
  #   #   - 8800:8800
  #   depends_on:
  #     - prometheus
  #   volumes:
  #     - /:/rootfs:ro
  #     - /run:/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   devices:
  #     - /dev/kmsg
  #   privileged: true
  #   restart: unless-stopped
  #   networks:
  #     kafkaNetwork:
  #       ipv4_address: 10.100.0.120
  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.8.2
    container_name: node_exporter
    command: "--path.rootfs=/host"
    pid: host
    ports:
      - 9100:9100
    volumes:
      - /:/host:ro,rslave
    privileged: true
    restart: unless-stopped
    networks:
      kafkaNetwork:
        ipv4_address: 10.100.0.120
  kafka-exporter:
    image: danielqsj/kafka-exporter 
    command: ["--kafka.server=broker:9092"]
    depends_on:
      - prometheus
    ports:
      - 9308:9308 
    networks:
      kafkaNetwork:
        ipv4_address: 10.100.0.130
networks:
  kafkaNetwork:
    internal: false
    ipam:
      driver: default
      config:
        - subnet: 10.100.0.1/16
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  