version: '3.8'
services:
  producer:
    build:
      context: ../kafka
      dockerfile: app/Dockerfile
    restart: always
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: broker:9092
      SPRING_KAFKA_PARTITIONS: ${SPRING_CONSUMERS}
      SPRING_KAFKA_PORT: ${SPRING_PRODUCER_PORT}
      SPRING_KAFKA_TOPIC_NAME: com.mw.master.kafka
    depends_on:
      - broker
    ports:
      - '${SPRING_PRODUCER_PORT}-${SPRING_PRODUCER_PORT_LIMIT}:${SPRING_PRODUCER_PORT}'
    deploy:
      mode: replicated
      replicas: ${SPRING_PRODUCERS}

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    restart: always
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:9092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

  kafdrop:
    image: obsidiandynamics/kafdrop:3.30.0
    restart: unless-stopped
    depends_on:
      - broker
    ports:
      - '9080:9000'
    environment:  
      KAFKA_BROKERCONNECT: broker:9092

  consumer:
    build:
      context: ../consumer
      dockerfile: app/Dockerfile
    restart: always
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: broker:9092
      SPRING_KAFKA_TOPIC_NAME: com.mw.master.kafka
      SPRING_KAFKA_PORT: ${SPRING_CONSUMER_PORT}
    depends_on:
      - producer
    ports:
      - '${SPRING_CONSUMER_PORT}-${PORT_LIMIT}:${SPRING_CONSUMER_PORT}'
    deploy:
      mode: replicated
      replicas: ${SPRING_CONSUMERS}

  prometheus:
    image: docker.io/prom/prometheus:v2.55.1
    container_name: prometheus
    ports:
      - 9090:9090
    expose:
      - "9090"
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus
    restart: always

  grafana:
    build: './grafana'
    container_name: 'grafana'
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    restart: always

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    restart: always
    command: ["--kafka.server=broker:9092"]
    ports:
      - 9308:9308

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    ports:
      - 8080:8080
    volumes:
      - /dev/disk/:/dev/disk:ro
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    devices:
      - /dev/kmsg
    privileged: true

volumes:
  prometheus-data: {}
  grafana-data: {}